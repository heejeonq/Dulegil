<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="accompany">
<!-- 동행 신청자 리스트 -->
<select id="applyMemList" resultType="hashmap" parameterType="hashmap">
	SELECT BLT.MEMBER_NO, M.MEMBER_NO AS MEM_NO, M.IMG_FILE, M.NM, M.RELIABILITY, BA.ACCOMPANY_DT, BLT.TITLE,
      	   BC.COURSE_NO,BLT.POST_NO,M.GENDER, TRUNC(MONTHS_BETWEEN(SYSDATE, M.DATE_BIRTH)/12) AS AGE,
      	   BA.PUBLIC_GENDER, BA.PUBLIC_AGE, AA.STATE_NO
	FROM BULLETIN_BOARD BLT INNER JOIN BOARD_COURSE BC
	                                ON BLT.POST_NO = BC.POST_NO
	                                AND BLT.DEL_DT IS NULL
	                        INNER JOIN BOARD_ACCOMPANY BA
	                                ON BC.POST_NO = BA.POST_NO
	                        INNER JOIN ACCOMPANY_APPLY AA
	                                ON AA.POST_NO = BLT.POST_NO
	                        INNER JOIN MEMBER M
	                                ON AA.MEMBER_NO = M.MEMBER_NO
	                                AND M.DEL_DT IS NULL
	                        INNER JOIN MEMBER M
	                                ON BLT.MEMBER_NO = M.MEMBER_NO
	WHERE BLT.MEMBER_NO = #{memNo}  
	AND TO_CHAR(BA.ACCOMPANY_DT, 'YY.MM.DD') >= TO_CHAR(SYSDATE, 'YY.MM.DD')                      
</select>
<!-- 채팅방 리스트 -->
<select id="chatList" resultType="hashmap" parameterType="hashmap">
	SELECT BB.TITLE 
	FROM BULLETIN_BOARD BB INNER JOIN BOARD_ACCOMPANY BA
                                   ON BB.POST_NO = BA.POST_NO
                                  AND TO_CHAR(BA.ACCOMPANY_DT, 'YY.MM.DD') >= TO_CHAR(SYSDATE, 'YY.MM.DD')  
	WHERE BB.MEMBER_NO = #{memNo}
	AND BB.BLTNBOARD_NO = 2     
	AND BB.DEL_DT IS NULL                           
</select>
<!-- 내가 신청한 동행 리스트 -->
<select id="myApply" resultType="hashmap" parameterType="hashmap">
	SELECT AA.STATE_NO, TO_CHAR(AA.REG_DT,'YYYY.MM.DD') AS REG_DT, BB.TITLE, MEM.NM, BC.COURSE_NO, BB.POST_NO
	FROM ACCOMPANY_APPLY AA INNER JOIN MEMBER M
	                                ON AA.MEMBER_NO = M.MEMBER_NO
	                        INNER JOIN BULLETIN_BOARD BB
	                                ON AA.POST_NO = BB.POST_NO
	                               AND BB.DEL_DT IS NULL
	                        INNER JOIN BOARD_COURSE BC
	                                ON BB.POST_NO = BC.POST_NO
	                        INNER JOIN BOARD_ACCOMPANY BA
	                                ON BA.POST_NO = BC.POST_NO
	                               
	                        INNER JOIN MEMBER MEM
	                                ON MEM.MEMBER_NO = BB.MEMBER_NO 
	 WHERE M.MEMBER_NO = #{memNo}                                                                                           
</select>
<!-- 동행 신청자 리스트 수락/거절 업데이트 -->
<update id="applyMemUpdate" parameterType="hashmap">
	UPDATE ACCOMPANY_APPLY SET STATE_NO = #{stateNo}
    WHERE MEMBER_NO = #{amemNo}
    AND POST_NO = #{postNo}
</update>
<!-- 동행 히스토리 리스트 -->
<select id="accompanyHistory" resultType="hashmap" parameterType="hashmap">
	
	SELECT DISTINCT BB.POST_NO, BC.COURSE_NO, BB.TITLE, TO_CHAR(BA.ACCOMPANY_DT,'YYYY.MM.DD') AS ACCOMPANY_DT 
    FROM BULLETIN_BOARD BB INNER JOIN BOARD_COURSE BC
                                   ON BB.POST_NO = BC.POST_NO
                           INNER JOIN BOARD_ACCOMPANY BA
                                   ON BB.POST_NO = BA.POST_NO
                     <![CDATA[    AND TO_CHAR(BA.ACCOMPANY_DT, 'YY.MM.DD') < TO_CHAR(SYSDATE, 'YY.MM.DD')  ]]> 
                           INNER JOIN ACCOMPANY_APPLY AA
                                   ON AA.POST_NO =BB.POST_NO
                                  AND STATE_NO = 2
                           INNER JOIN MEMBER MEM 
                                   ON MEM.MEMBER_NO = AA.MEMBER_NO
                           INNER JOIN MEMBER AM 
                                   ON BB.MEMBER_NO = AM.MEMBER_NO
    WHERE MEM.MEMBER_NO = #{memNo} OR AM.MEMBER_NO = #{memNo}
    ORDER BY ACCOMPANY_DT DESC                                                                                          
	
</select>	
<!-- 동행 히스토리 멤버 리스트 -->
<select id="accompanyMemList" resultType="hashmap" parameterType="hashmap">
	
 <!--내가 동행글 작성자일 때  -->
    SELECT AM.NM, BB.POST_NO, AM.IMG_FILE, AM.MEMBER_NO, R.SCOURE
    FROM BULLETIN_BOARD BB INNER JOIN BOARD_COURSE BC
                                   ON BB.POST_NO = BC.POST_NO
                           INNER JOIN BOARD_ACCOMPANY BA
                                   ON BB.POST_NO = BA.POST_NO
                   <![CDATA[      AND TO_CHAR(BA.ACCOMPANY_DT, 'YY.MM.DD') < TO_CHAR(SYSDATE, 'YY.MM.DD') ]]> 
                           INNER JOIN ACCOMPANY_APPLY AA
                                   ON AA.POST_NO =BB.POST_NO
                                  AND STATE_NO = 2
                           INNER JOIN MEMBER AM 
                                   ON AM.MEMBER_NO = AA.MEMBER_NO
                           INNER JOIN MEMBER MEM 
                                   ON BB.MEMBER_NO = MEM.MEMBER_NO
                            LEFT JOIN RELIABILITY R
                                   ON BB.POST_NO = R.POST_NO
                                   AND MEM.MEMBER_NO = R.RATING_MEMBER_NO
                                   AND AM.MEMBER_NO = R.TARGET_RATING_MEMBER_NO
   WHERE MEM.MEMBER_NO = #{memNo}
   AND BB.POST_NO = #{postNo}
   UNION
   <!-- 내가 신청자일 때  -->
  SELECT M.NM, A.POST_NO, M.IMG_FILE, M.MEMBER_NO, SCOURE
   FROM MEMBER M 
   INNER JOIN (
   SELECT ACMP, ABC.POST_NO
   FROM (
   SELECT BB.MEMBER_NO, BB.POST_NO, AA.MEMBER_NO AS ACMP, BB.TITLE
   FROM ACCOMPANY_APPLY AA INNER JOIN BULLETIN_BOARD BB
                                   ON AA.POST_NO = BB.POST_NO             
   ) ABC INNER JOIN
   
   (SELECT M.MEMBER_NO, AA.POST_NO
   FROM MEMBER M INNER JOIN ACCOMPANY_APPLY AA
                        ON M.MEMBER_NO = AA.MEMBER_NO
                        AND STATE_NO = 2
                        AND M.MEMBER_NO = #{memNo}
      ) CBA ON ABC.POST_NO = CBA.POST_NO 
     UNION 
      
   SELECT ACMP, ABC.POST_NO
   FROM (
  SELECT AA.MEMBER_NO, BB.POST_NO, BB.MEMBER_NO AS ACMP, BB.TITLE
   FROM ACCOMPANY_APPLY AA INNER JOIN BULLETIN_BOARD BB
                                   ON AA.POST_NO = BB.POST_NO       
   ) ABC INNER JOIN
   
   (SELECT M.MEMBER_NO, AA.POST_NO
   FROM MEMBER M INNER JOIN ACCOMPANY_APPLY AA
                        ON M.MEMBER_NO = AA.MEMBER_NO
                        AND STATE_NO = 2
                        AND M.MEMBER_NO = #{memNo}
      ) CBA ON ABC.POST_NO = CBA.POST_NO  
      
      ) A ON A.ACMP = M.MEMBER_NO
      LEFT JOIN RELIABILITY R
                   ON A.ACMP = R.TARGET_RATING_MEMBER_NO
                   AND A.POST_NO = R.POST_NO
                   AND R.RATING_MEMBER_NO = #{memNo}
    WHERE M.MEMBER_NO != #{memNo} 
    AND A.POST_NO = #{postNo}                                                                             
	
</select>	
<!-- 동행 평가대상 리스트 -->
<select id="accompanyRate" resultType="hashmap" parameterType="hashmap">
	
	SELECT DISTINCT BB.POST_NO, BC.COURSE_NO, BB.TITLE, TO_CHAR(BA.ACCOMPANY_DT,'YYYY.MM.DD') AS ACCOMPANY_DT 
    FROM BULLETIN_BOARD BB INNER JOIN BOARD_COURSE BC
                                   ON BB.POST_NO = BC.POST_NO
                           INNER JOIN BOARD_ACCOMPANY BA
                                   ON BB.POST_NO = BA.POST_NO
                     <![CDATA[    AND TO_CHAR(BA.ACCOMPANY_DT, 'YY.MM.DD') < TO_CHAR(SYSDATE, 'YY.MM.DD')  ]]> 
                           INNER JOIN ACCOMPANY_APPLY AA
                                   ON AA.POST_NO =BB.POST_NO
                                  AND STATE_NO = 2
                           INNER JOIN MEMBER MEM 
                                   ON MEM.MEMBER_NO = AA.MEMBER_NO
                           INNER JOIN MEMBER AM 
                                   ON BB.MEMBER_NO = AM.MEMBER_NO
    WHERE MEM.MEMBER_NO = #{memNo} OR AM.MEMBER_NO = #{memNo}
    ORDER BY ACCOMPANY_DT DESC                                                                                          
	
</select>	
<!-- 동행 상대평가 신뢰도 주기 -->
<insert id="rateInsert" parameterType="hashmap">
	INSERT INTO RELIABILITY(POST_NO, TARGET_RATING_MEMBER_NO, RATING_MEMBER_NO, SCOURE)
 	VALUES(#{postNo}, #{amemNo}, #{memNo}, #{rate})
</insert>
<!-- 동행 상대평가 신뢰도 반영 업데이트 -->
<update id="rateUpdate" parameterType="hashmap">
	 UPDATE MEMBER SET RELIABILITY = (SELECT ROUND(SUM/CNT, 1)
	                                 FROM(SELECT COUNT(*) +1 AS CNT
	                                      FROM RELIABILITY
	                                      WHERE TARGET_RATING_MEMBER_NO = #{amemNo}),
	                                     (SELECT  SUM(SCOURE)+3 AS SUM
	                                      FROM RELIABILITY
	                                      WHERE TARGET_RATING_MEMBER_NO = #{amemNo}))
	WHERE MEMBER_NO = #{amemNo}
</update>
<!-- 동행 상대평가 신뢰도값 -->
<select id="accompanyScoure" resultType="hashmap" parameterType="hashmap">
	SELECT SCOURE
	FROM RELIABILITY
	WHERE POST_NO = #{postNo}
	AND TARGET_RATING_MEMBER_NO = #{amemNo}
	AND RATING_MEMBER_NO = #{amemNo}                       
</select>
<!-- 회원 신고하기 -->
<insert id="report" parameterType="hashmap">
MERGE INTO REPORT
USING DUAL
    ON (REPORT_MEMBER_NO = #{memNo} AND TARGET_REPORT_MEMBER_NO = #{amemNo})
WHEN NOT MATCHED THEN
    INSERT (REPORT_NO, REPORT_TYPE_NO, REPORT_MEMBER_NO, TARGET_REPORT_MEMBER_NO, OTHER, TARGET_MN)
    VALUES(REPORT_SEQ.NEXTVAL, #{reportTypeNo}, #{memNo}, #{amemNo}, #{reportContents, jdbcType = VARCHAR}, #{amemNm})
</insert>

</mapper>